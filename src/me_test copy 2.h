////////////////////////////////////////////////////////////////////////////////
// NOTE : Generated by slothjson. It is NOT supposed to modify this file.
////////////////////////////////////////////////////////////////////////////////
#ifndef __me_test_20210221003122_h__
#define __me_test_20210221003122_h__

#include "slothjson.h"


// ----------------------------------
// Meta macro
// ----------------------------------

#define macro_first(...)                                macro_first_( __VA_ARGS__, 0 )
#define macro_first_( A, ... )                          A

#define macro_concat( A, B )                            macro_concat_( A, B )
#define macro_concat_( A, B )                           A##B

#define macro_count(...)                                macro_at( 8, __VA_ARGS__, 8, 7, 6, 5, 4, 3, 2, 1 )
#define macro_more(...)                                 macro_at( 8, __VA_ARGS__, 1, 1, 1, 1, 1, 1, 1, 1 )

#define macro_at0(...)                                  macro_first(__VA_ARGS__)
#define macro_at1(_0, ...)                              macro_first(__VA_ARGS__)
#define macro_at2(_0, _1, ...)                          macro_first(__VA_ARGS__)
#define macro_at3(_0, _1, _2, ...)                      macro_first(__VA_ARGS__)
#define macro_at4(_0, _1, _2, _3, ...)                  macro_first(__VA_ARGS__)
#define macro_at5(_0, _1, _2, _3, _4 ...)               macro_first(__VA_ARGS__)
#define macro_at6(_0, _1, _2, _3, _4, _5 ...)           macro_first(__VA_ARGS__)
#define macro_at7(_0, _1, _2, _3, _4, _5, _6 ...)       macro_first(__VA_ARGS__)
#define macro_at8(_0, _1, _2, _3, _4, _5, _6, _7, ...)  macro_first(__VA_ARGS__)
#define macro_at(N, ...)                                macro_concat(macro_at, N)( __VA_ARGS__ )

#define macro_join0( ... )
#define macro_join1( A )                                A
#define macro_join2( A, B )                             A##____##B
#define macro_join3( A, B, C )                          A##____##B##____##C
#define macro_join4( A, B, C, D )                       A##____##B##____##C##____##D
#define macro_join5( A, B, C, D, E )                    A##____##B##____##C##____##D##____##E
#define macro_join6( A, B, C, D, E, F )                 A##____##B##____##C##____##D##____##E##____##F
#define macro_join7( A, B, C, D, E, F, G )              A##____##B##____##C##____##D##____##E##____##F##____##G
#define macro_join8( A, B, C, D, E, F, G, H )           A##____##B##____##C##____##D##____##E##____##F##____##G##____##H
#define macro_join( ... )                               macro_concat(macro_join, macro_count(__VA_ARGS__))(__VA_ARGS__)

#define macro_cstr( A )                                 macro_cstr_( A )
#define macro_cstr_( A )                                #A





namespace slothjson {

typedef bool MtBool;

#define MtBoolDefault true

typedef int8_t MtInt8;

#define MtInt8Default 0

typedef int16_t MtInt16;

#define MtInt16Default 0 

typedef int32_t MtInt32;

#define MtInt32Default 0 

typedef int64_t MtInt64;

#define MtInt64Default 0 

typedef double MtDouble;

#define MtDoubleDefault 0.0f

typedef std::map<std::string, std::string> MtMap;
typedef std::vector<int32_t> MtArray;
typedef std::string MtString;

#define mt_field_2(type, field) \
public: \
    type field; \
    void skip_##field() { __skip_##field = true; } \
    bool json_has_##field() const { return __json_has_##field; } \
private: \
    bool __skip_##field; \
    bool __json_has_##field; \
    void init_##field() { __skip_##field = false; __json_has_##field = true; field = type##Default; }

#define mt_struct_begin(name) \
struct name \
{

#define mt_struct_end(name) \
    name(); \
    name& operator=(const name& obj_val); \
    bool operator==(const name& obj_val) const; \
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const; \
    bool decode(const rapidjson::Value& json_val); \
}; \
bool encode(const name& obj_val, allocator_t& alloc, rapidjson::Value& json_val); \
bool decode(const rapidjson::Value& json_val, name& obj_val);




mt_struct_begin(metest_object_t)
    mt_field_2(MtBool, isStarted)
    mt_field_2(MtInt8, mak)
    mt_field_2(MtInt16, th)
    mt_field_2(MtInt32, len)
    mt_field_2(MtInt64, length)
    mt_field_2(MtDouble, amount)
    mt_field_2(MtString, str)
    mt_field_2(MtArray, vec)
    mt_field_2(MtMap, dict)
mt_struct_end(metest_object_t)


mt_imp_struct_begin(metest_object_t)
    mt_field_2(isStarted, mak, th, len, length, amount, str, vec, dict)
mt_imp_struct_end(metest_object_t)

} // namespace slothjson

#endif // __me_test_20210221003122_h__