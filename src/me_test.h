////////////////////////////////////////////////////////////////////////////////
// NOTE : Generated by slothjson. It is NOT supposed to modify this file.
////////////////////////////////////////////////////////////////////////////////
#ifndef __me_test_20210221003122_h__
#define __me_test_20210221003122_h__

#include "slothjson.h"

namespace slothjson {

struct metest_object_t
{
    bool isStarted;
    int8_t mak;
    uint8_t fin;
    int16_t th;
    uint16_t sh;
    int32_t len;
    uint32_t count;
    int64_t length;
    uint64_t age;
    float amountd;
    double amount;
    std::string str;
    std::vector<int32_t > vec;
    std::map<std::string, std::string > dict;

    void skip_isStarted() { __skip_isStarted = true; }
    void skip_mak() { __skip_mak = true; }
    void skip_fin() { __skip_fin = true; }
    void skip_th() { __skip_th = true; }
    void skip_sh() { __skip_sh = true; }
    void skip_len() { __skip_len = true; }
    void skip_count() { __skip_count = true; }
    void skip_length() { __skip_length = true; }
    void skip_age() { __skip_age = true; }
    void skip_amountd() { __skip_amountd = true; }
    void skip_amount() { __skip_amount = true; }
    void skip_str() { __skip_str = true; }
    void skip_vec() { __skip_vec = true; }
    void skip_dict() { __skip_dict = true; }

    bool json_has_isStarted() const { return __json_has_isStarted; }
    bool json_has_mak() const { return __json_has_mak; }
    bool json_has_fin() const { return __json_has_fin; }
    bool json_has_th() const { return __json_has_th; }
    bool json_has_sh() const { return __json_has_sh; }
    bool json_has_len() const { return __json_has_len; }
    bool json_has_count() const { return __json_has_count; }
    bool json_has_length() const { return __json_has_length; }
    bool json_has_age() const { return __json_has_age; }
    bool json_has_amountd() const { return __json_has_amountd; }
    bool json_has_amount() const { return __json_has_amount; }
    bool json_has_str() const { return __json_has_str; }
    bool json_has_vec() const { return __json_has_vec; }
    bool json_has_dict() const { return __json_has_dict; }

    metest_object_t();
    metest_object_t& operator=(const metest_object_t& obj_val);
    bool operator==(const metest_object_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);

private:
    bool __skip_isStarted;
    bool __skip_mak;
    bool __skip_fin;
    bool __skip_th;
    bool __skip_sh;
    bool __skip_len;
    bool __skip_count;
    bool __skip_length;
    bool __skip_age;
    bool __skip_amountd;
    bool __skip_amount;
    bool __skip_str;
    bool __skip_vec;
    bool __skip_dict;

    bool __json_has_isStarted;
    bool __json_has_mak;
    bool __json_has_fin;
    bool __json_has_th;
    bool __json_has_sh;
    bool __json_has_len;
    bool __json_has_count;
    bool __json_has_length;
    bool __json_has_age;
    bool __json_has_amountd;
    bool __json_has_amount;
    bool __json_has_str;
    bool __json_has_vec;
    bool __json_has_dict;
};

bool encode(const metest_object_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, metest_object_t& obj_val);

} // namespace slothjson

#endif // __me_test_20210221003122_h__